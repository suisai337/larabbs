<?php

namespace App\Model;

use App\Models\Status;
use function foo\func;
use Illuminate\Notifications\Notifiable;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Support\Str;
use Illuminate\Foundation\Auth\User as Authenticatable;

class User extends Authenticatable
{
    use Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'email', 'password',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    /**
     * Get gravatar
     *
     * @param string $size
     * @return string
     */
    public function gravatar($size = '100')
    {
        $hash = md5(strtolower(trim($this->attributes['email'])));
        return "http://www.gravatar.com/avatar/$hash?s=$size";
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::creating(function ($user) {
            $user->activation_token = Str::random(30);
        });

    }

    public function statuses()
    {
        return $this->hasMany(Status::class);
    }

    public function feed()
    {
        return $this->statuses()->orderByDesc('created_at');
    }

    //  我被关注的用户(粉丝)
    //  user_id 被关注的
    //  follower_id 主动关注的
    public function followers()
    {
        return
            $this->belongsToMany
            (User::class, 'followers', 'user_id', 'follower_id');
    }

    //  我主动关注的用户
    public function followings()
    {
        return
        $this->belongsToMany
        (User::class, 'followers', 'follower_id', 'user_id');
    }

    //  关注用户
    public function follow($userIds)
    {
        if (! is_array($userIds)) {
            $userIds = compact('userIds');
        }
        $this->followings()->sync($userIds, false);
    }

    //  取消关注
    public function unfollow($userIds)
    {
        if (! is_array($userIds)) {
            $userIds = compact('userIds');
        }
        $this->followings()->detach($userIds);
    }

    //  判断是否被关注
    public function isFollowing($userId)
    {
        return $this->followings->contains($userId);
    }
}
